@page "/Dialog"

@using FluentUI.Demo.Shared.Pages.Dialog.Examples;

<h1>Dialog</h1>

<DemoSection Title="DialogService with IDialogReference" MaxHeight="500px" Component="@typeof(DialogServiceExample)" AdditionalFiles="@(new[] {"SimpleDialog.razor"})">
    <Description>
        This example shows how to use async methods to display a dialog and get the result back from it. 
    </Description>
</DemoSection>

<DemoSection Title="Customized Dialog" Component="@typeof(DialogCustomizableExample)" AdditionalFiles="@(new[] {"SimpleCustomizedDialog.razor"})">
    <Description>
        <p>
            This example shows how to open a Dialog using the <code>DialogService</code>. The dialog is customized by specifying a header,
            footer and body by leveraging the <code>FluentDialogHeader</code>, <code>FluentDialogFooter</code> and <code>FluentDialogBody</code> parameters.
        </p>
        <p>
            The dialog can <b>not</b> be dismissed by clicking on the overlay. This is achieved by setting the dialog parameter <code>PreventDismissOnOverlayClick</code> to <code>true</code>.
        </p>
    </Description>
</DemoSection>

<DemoSection Title="DialogService with EventCallback" MaxHeight="500px" Component="@typeof(DialogServiceCallbackExample)" AdditionalFiles="@(new[] {"SimpleDialog.razor"})">
    <Description>
        This example shows how to use an <code>EventCallback</code> parameter to get data back from the dialog.
    </Description>
</DemoSection>


<DemoSection Title="Dialog without using DialogService" MaxHeight="500px" Component="@typeof(DialogDefault)" CollocatedFiles="@(new[] {"css"})">
    <Description>
        This example shows a simple dialog created by specifying its content manually (see the Razor tab). Because of this, the dialog is not automatically styled.
        A CSS file has been added to set the width, height and padding of the dialog.
    </Description>
</DemoSection>

<DemoSection Title="SimpleDialog as component" MaxHeight="500px" Component="@typeof(DialogSimpleDialog)">
    <Description>
        For a component to be useable in a dialog, it just needs to inherit from <code>IDialogContentComponent&lt;T&gt;</code>.
        They can still be used as a normal component as well. This example shows the <code>SimpleDialog</code> component from the
        previous example being rendered directly in the page.
    </Description>
</DemoSection>

